import tkinter as tk
from tkinter import scrolledtext, ttk
import requests
import json
import os
import threading

# Obtener los nombres de los endpoints desde la carpeta "endpoints" en el directorio raíz
ROOT_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
ENDPOINTS_FOLDER = os.path.join(ROOT_DIR, "endpoints")
endpoints = []
post_endpoints = {"show_message_window"}  # Lista de endpoints GET conocidos

if os.path.isdir(ENDPOINTS_FOLDER):
    excluded_simple_endpoints = ["blueprint_endpoint", "__init__"]
    excluded_complex_enpoints = ["__pycache__"]
    print(os.listdir(ENDPOINTS_FOLDER))
    endpoints = [
        f[:-3] for f in os.listdir(ENDPOINTS_FOLDER)
        if f.endswith(".py") and f[:-3] not in excluded_simple_endpoints
    ] + [
        f for f in os.listdir(ENDPOINTS_FOLDER)
        if os.path.isdir(os.path.join(ENDPOINTS_FOLDER, f)) and os.path.exists(os.path.join(ENDPOINTS_FOLDER, f, "endpoint.py") and f not in excluded_complex_enpoints)
    ]
# Función para enviar la solicitud en un hilo separado
def send_request():
    threading.Thread(target=send_request_thread, daemon=True).start()

# Función que ejecuta la solicitud sin bloquear la interfaz
def send_request_thread():
    selected_endpoint = endpoint_var.get()
    message = message_entry.get()
    port = port_entry.get()
    
    # Limpiar respuesta anterior
    response_text.delete(1.0, tk.END)
    
    if not port:
        response_text.insert(tk.END, "Error: El campo 'port' es obligatorio.")
        return
    if not selected_endpoint:
        response_text.insert(tk.END, "Error: Debes seleccionar un endpoint.")
        return
    
    url = f"http://localhost:{port}/api/{selected_endpoint}"
    try:
        if selected_endpoint in post_endpoints:
            payload = {"message": message}
            response = requests.post(url, json=payload)
        else:
            response = requests.get(url)
        
        response_data = response.json()
        formatted_response = json.dumps(response_data, indent=4)
        response_text.insert(tk.END, formatted_response)
    except requests.exceptions.RequestException as e:
        response_text.insert(tk.END, f"Error en la solicitud: {e}")

# Configuración de la ventana
root = tk.Tk()
root.title("JSON Request Sender")
root.geometry("400x550")
root.resizable(True, True)

# Marco principal
main_frame = tk.Frame(root)
main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

# Campo de entrada del puerto
port_label = tk.Label(main_frame, text="Port:")
port_label.pack()
port_entry = tk.Entry(main_frame)
port_entry.pack(fill=tk.X)
port_entry.insert(0, "5000")

# Selección de endpoint
endpoint_label = tk.Label(main_frame, text="Select Endpoint:")
endpoint_label.pack()
endpoint_var = tk.StringVar()
endpoint_frame = tk.Frame(main_frame)
endpoint_frame.pack()
for ep in endpoints:
    tk.Radiobutton(endpoint_frame, text=ep, variable=endpoint_var, value=ep).pack(anchor="w")

# Campo de entrada del mensaje
message_label = tk.Label(main_frame, text="Message:")
message_label.pack()
message_entry = tk.Entry(main_frame)
message_entry.pack(fill=tk.X)

# Botón de envío
send_button = tk.Button(main_frame, text="Send Request", command=send_request)
send_button.pack(pady=10)

# Respuesta del servidor
response_label = tk.Label(main_frame, text="Server Response:")
response_label.pack()
response_text = scrolledtext.ScrolledText(main_frame, height=10)
response_text.pack(fill=tk.BOTH, expand=True)

root.mainloop()
